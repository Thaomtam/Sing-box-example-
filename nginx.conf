user nginx; # Chạy Nginx với người dùng 'nginx' để tăng cường bảo mật.
worker_processes auto; # Sử dụng số lượng tiến trình worker tự động dựa trên số lượng CPU có sẵn.
worker_rlimit_nofile 65535; # Tăng giới hạn số lượng file descriptor mà mỗi tiến trình worker có thể mở.

error_log /var/log/nginx/error.log notice; # Ghi log lỗi của Nginx tại file error.log với mức độ 'notice'.
pid /var/run/nginx.pid; # Lưu PID của Nginx tại file /var/run/nginx.pid.

events {
    worker_connections 8192; # Tăng số lượng kết nối tối đa mà mỗi worker có thể xử lý đồng thời.
    multi_accept on; # Cho phép worker chấp nhận nhiều kết nối cùng một lúc.
    use epoll; # Sử dụng epoll (trên hệ thống Linux) để cải thiện hiệu năng xử lý I/O.
}

http {
    log_format main '[$time_local] $remote_addr "$http_referer" "$http_user_agent"'; # Định dạng log truy cập.
    access_log /var/log/nginx/access.log main; # Ghi log truy cập tại file access.log.

    keepalive_timeout 65; # Thời gian chờ cho kết nối keepalive.
    keepalive_requests 100; # Giới hạn số lượng yêu cầu tối đa trên mỗi kết nối keepalive.

    proxy_buffer_size 16k; # Định kích thước bộ nhớ đệm cho mỗi kết nối proxy.
    proxy_buffers 4 32k; # Số lượng và kích thước của các bộ nhớ đệm proxy.
    proxy_busy_buffers_size 64k; # Kích thước của bộ nhớ đệm proxy bận.
    client_max_body_size 32M; # Giới hạn kích thước tối đa của body yêu cầu từ client.

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    } # Ánh xạ giá trị của $http_upgrade để xác định trạng thái của kết nối (nâng cấp hoặc đóng).

    map $remote_addr $proxy_forwarded_elem {
        ~^[0-9.]+$        "for=$remote_addr";
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";
        default           "for=unknown";
    } # Tạo giá trị cho tiêu đề `Forwarded` dựa trên địa chỉ IP của client.

    map $http_forwarded $proxy_add_forwarded {
        # Ghép nối giá trị của tiêu đề `Forwarded` hiện có với giá trị mới từ $proxy_forwarded_elem.
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5D\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";
        default "$proxy_forwarded_elem";
    }

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off; # Định nghĩa nơi lưu trữ bộ nhớ đệm proxy.

    server {
        listen 80;
        listen [::]:80;

        location = /gists/cache {
            if ($http_upgrade != "websocket") {
                return 404;
            }

            rewrite ^/gists/cache/(.*)$ /$1 break;

            proxy_pass http://127.0.0.1:8001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
        } # Xử lý kết nối websocket tại đường dẫn /gists/cache.

        location / {
            return 301 https://$host$request_uri;
        } # Chuyển hướng tất cả lưu lượng HTTP sang HTTPS.
    }

    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;

        ssl_reject_handshake on; # Từ chối bắt tay SSL (không cho phép kết nối qua SSL tại server này).
        ssl_protocols TLSv1.2 TLSv1.3; # Chỉ cho phép các kết nối sử dụng TLS 1.2 và TLS 1.3.

        ssl_session_timeout 1h; # Thời gian timeout cho phiên SSL.
        ssl_session_cache shared:SSL:10m; # Cấu hình bộ nhớ đệm của phiên SSL.
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on; # Kích hoạt HTTP/2 cho server này.

        server_name example.com; # Tên miền của server.

        ssl_certificate /etc/ssl/private/fullchain.cer; # Đường dẫn đến chứng chỉ SSL.
        ssl_certificate_key /etc/ssl/private/private.key; # Đường dẫn đến khóa riêng SSL.

        ssl_protocols TLSv1.2 TLSv1.3; # Chỉ cho phép các kết nối sử dụng TLS 1.2 và TLS 1.3.
        ssl_ciphers 'TLS13_AES_128_GCM_SHA256:TLS13_AES_256_GCM_SHA384:TLS13_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305'; # Các bộ mã hóa SSL cho phép.
        ssl_prefer_server_ciphers on; # Ưu tiên sử dụng bộ mã hóa của server.

        ssl_stapling on; # Kích hoạt SSL stapling.
        ssl_stapling_verify on; # Xác minh thông tin SSL stapling.
        resolver 1.1.1.1 valid=60s; # Đặt DNS resolver.
        resolver_timeout 2s; # Thời gian chờ cho DNS resolver.

        client_header_buffer_size 8k; # Kích thước bộ đệm của tiêu đề client.

        location = /lovelive {
            if ($http_upgrade != "websocket") {
                return 404;
            }

            rewrite ^/lovelive/(.*)$ /$1 break;

            proxy_pass http://127.0.0.1:8001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;
        } # Xử lý kết nối websocket tại đường dẫn /lovelive.

        location / {
            sub_filter $proxy_host $host; # Thay thế $proxy_host bằng $host trong nội dung trả về.
            sub_filter_once off; # Cho phép thay thế nhiều lần.

            set $website khosihuythao.com;
            proxy_pass https://$website; # Chuyển tiếp các yêu cầu đến trang web 'khosihuythao.com'.
            resolver 1.1.1.1; # Sử dụng DNS resolver của Cloudflare.

            proxy_cache my_cache; # Sử dụng bộ nhớ đệm proxy.
            proxy_cache_revalidate on; # Yêu cầu kiểm tra lại dữ liệu cache với upstream.
            proxy_cache_min_uses 1; # Cache sau 1 lần sử dụng.
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504; # Sử dụng dữ liệu cache cũ khi gặp lỗi.
            proxy_cache_background_update on; # Cập nhật dữ liệu cache ngầm trong khi phục vụ nội dung cũ.
            add_header X-Proxy-Cache $upstream_cache_status; # Thêm tiêu đề `X-Proxy-Cache` để theo dõi trạng thái cache.

            proxy_set_header Host $proxy_host;
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            proxy_buffering off;
            proxy_ssl_server_name on;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Forwarded $proxy_add_forwarded;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 60s;
        } # Xử lý các yêu cầu thông thường với bộ nhớ đệm và các tùy chọn proxy khác.
    }
}
